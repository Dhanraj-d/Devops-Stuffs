# To disable subscription
ALTER SUBSCRIPTION sub_leap_scholar DISABLE;
# To drop subscription
DROP SUBSCRIPTION sub_leap_scholar;
# To check replication slot
SELECT * FROM pg_subscription;



CREATE SUBSCRIPTION sub_leap_scholar
CONNECTION 'host=production-leap-db.cgveth26qa0v.ap-south-1.rds.amazonaws.com port=5432 dbname=leap_scholar user=replica password=bbbwebbjbjhew79'
PUBLICATION pub_leap_scholar
WITH (
  copy_data = false,  -- Will copy the existing data
  create_slot = true,
  slot_name = 'sub_leap_scholar',
  enabled = true
);



# To check replication slot
SELECT 
    slot_name,
    plugin,
    slot_type,
    active,
    pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn)) AS retained_wal_size,
    restart_lsn,
    confirmed_flush_lsn
FROM 
    pg_replication_slots;



#To monitor replica



#!/bin/bash

# PostgreSQL credentials
PGHOST="localhost"
PGPORT="5432"
PGUSER="postgres"
PGDATABASE="your_db_name"
# Optional: export PGPASSWORD or use .pgpass for password
# export PGPASSWORD="your_password"

# Slack webhook URL
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/XXXX/YYYY/ZZZZ"

# Get inactive replication slots
INACTIVE_SLOTS=$(psql -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" -d "$PGDATABASE" -Atc "
SELECT slot_name
FROM pg_replication_slots
WHERE slot_type = 'logical' AND active = false;
")

# If any inactive slots found, send Slack alert
if [[ -n "$INACTIVE_SLOTS" ]]; then
  MESSAGE="⚠️ *Inactive replication slots detected:*\n\`\`\`\n$INACTIVE_SLOTS\n\`\`\`"
  curl -X POST -H 'Content-type: application/json' \
    --data "{\"text\":\"$MESSAGE\"}" \
    "$SLACK_WEBHOOK_URL"
else
  echo "[OK] All replication slots are active."
fi


